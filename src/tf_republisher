#!/usr/bin/env python

import rospy
from tf2_msgs.msg import TFMessage
from threading import Lock

class TfRepublisher(object):

    def __init__(self):
        self.rate = rospy.Rate(rospy.get_param("~rate", 0.5))
        self.pub = rospy.Publisher(rospy.get_param("~in_topic", "/tf_static"), TFMessage, queue_size=2)
        self.subscriber = rospy.Subscriber(rospy.get_param("~out_topic", "/tf_static_remapped"), TFMessage, self.listen)
        self.last_message = TFMessage()
        self.lock = Lock()

    def listen(self, msg):
        self.lock.acquire()
        self.last_message = msg
        self.lock.release()

    def run(self):
        while not rospy.is_shutdown():
            self.lock.acquire()
            self.pub.publish(self.last_message)
            self.lock.release()
            self.rate.sleep()

if __name__ == '__main__':
    try:
        rospy.init_node('tf_static_republisher', anonymous=True)
        node = TfRepublisher()
        node.run()
    except rospy.ROSInterruptException:
        pass